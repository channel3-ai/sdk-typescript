/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Brand,
  ErrorResponse,
  PaginatedResponseBrand,
  Product,
  ProductDetail,
  SearchRequest,
} from '../models/index';
import {
    BrandFromJSON,
    BrandToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    PaginatedResponseBrandFromJSON,
    PaginatedResponseBrandToJSON,
    ProductFromJSON,
    ProductToJSON,
    ProductDetailFromJSON,
    ProductDetailToJSON,
    SearchRequestFromJSON,
    SearchRequestToJSON,
} from '../models/index';

export interface GetBrandDetailV0BrandsBrandIdGetRequest {
    brandId: string;
}

export interface GetBrandsV0BrandsGetRequest {
    query?: string | null;
    page?: number;
    size?: number;
}

export interface GetProductDetailV0ProductsProductIdGetRequest {
    productId: string;
}

export interface SearchV0SearchPostRequest {
    searchRequest: SearchRequest;
}

/**
 * Channel3ApiApi - interface
 * 
 * @export
 * @interface Channel3ApiApiInterface
 */
export interface Channel3ApiApiInterface {
    /**
     * Get detailed information for a specific brand by its ID.
     * @summary Get Brand Detail
     * @param {string} brandId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Channel3ApiApiInterface
     */
    getBrandDetailV0BrandsBrandIdGetRaw(requestParameters: GetBrandDetailV0BrandsBrandIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Brand>>;

    /**
     * Get detailed information for a specific brand by its ID.
     * Get Brand Detail
     */
    getBrandDetailV0BrandsBrandIdGet(requestParameters: GetBrandDetailV0BrandsBrandIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Brand>;

    /**
     * Get all brands that the vendor currently sells.
     * @summary Get Brands
     * @param {string} [query] 
     * @param {number} [page] 
     * @param {number} [size] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Channel3ApiApiInterface
     */
    getBrandsV0BrandsGetRaw(requestParameters: GetBrandsV0BrandsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedResponseBrand>>;

    /**
     * Get all brands that the vendor currently sells.
     * Get Brands
     */
    getBrandsV0BrandsGet(requestParameters: GetBrandsV0BrandsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedResponseBrand>;

    /**
     * Get detailed information about a specific product by its ID.
     * @summary Get Product Detail
     * @param {string} productId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Channel3ApiApiInterface
     */
    getProductDetailV0ProductsProductIdGetRaw(requestParameters: GetProductDetailV0ProductsProductIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductDetail>>;

    /**
     * Get detailed information about a specific product by its ID.
     * Get Product Detail
     */
    getProductDetailV0ProductsProductIdGet(requestParameters: GetProductDetailV0ProductsProductIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductDetail>;

    /**
     * Search for products.
     * @summary Search
     * @param {SearchRequest} searchRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Channel3ApiApiInterface
     */
    searchV0SearchPostRaw(requestParameters: SearchV0SearchPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Product>>>;

    /**
     * Search for products.
     * Search
     */
    searchV0SearchPost(requestParameters: SearchV0SearchPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Product>>;

}

/**
 * 
 */
export class Channel3ApiApi extends runtime.BaseAPI implements Channel3ApiApiInterface {

    /**
     * Get detailed information for a specific brand by its ID.
     * Get Brand Detail
     */
    async getBrandDetailV0BrandsBrandIdGetRaw(requestParameters: GetBrandDetailV0BrandsBrandIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Brand>> {
        if (requestParameters['brandId'] == null) {
            throw new runtime.RequiredError(
                'brandId',
                'Required parameter "brandId" was null or undefined when calling getBrandDetailV0BrandsBrandIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // APIKeyHeader authentication
        }


        let urlPath = `/v0/brands/{brand_id}`;
        urlPath = urlPath.replace(`{${"brand_id"}}`, encodeURIComponent(String(requestParameters['brandId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BrandFromJSON(jsonValue));
    }

    /**
     * Get detailed information for a specific brand by its ID.
     * Get Brand Detail
     */
    async getBrandDetailV0BrandsBrandIdGet(requestParameters: GetBrandDetailV0BrandsBrandIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Brand> {
        const response = await this.getBrandDetailV0BrandsBrandIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all brands that the vendor currently sells.
     * Get Brands
     */
    async getBrandsV0BrandsGetRaw(requestParameters: GetBrandsV0BrandsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedResponseBrand>> {
        const queryParameters: any = {};

        if (requestParameters['query'] != null) {
            queryParameters['query'] = requestParameters['query'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // APIKeyHeader authentication
        }


        let urlPath = `/v0/brands`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedResponseBrandFromJSON(jsonValue));
    }

    /**
     * Get all brands that the vendor currently sells.
     * Get Brands
     */
    async getBrandsV0BrandsGet(requestParameters: GetBrandsV0BrandsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedResponseBrand> {
        const response = await this.getBrandsV0BrandsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get detailed information about a specific product by its ID.
     * Get Product Detail
     */
    async getProductDetailV0ProductsProductIdGetRaw(requestParameters: GetProductDetailV0ProductsProductIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProductDetail>> {
        if (requestParameters['productId'] == null) {
            throw new runtime.RequiredError(
                'productId',
                'Required parameter "productId" was null or undefined when calling getProductDetailV0ProductsProductIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // APIKeyHeader authentication
        }


        let urlPath = `/v0/products/{product_id}`;
        urlPath = urlPath.replace(`{${"product_id"}}`, encodeURIComponent(String(requestParameters['productId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductDetailFromJSON(jsonValue));
    }

    /**
     * Get detailed information about a specific product by its ID.
     * Get Product Detail
     */
    async getProductDetailV0ProductsProductIdGet(requestParameters: GetProductDetailV0ProductsProductIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProductDetail> {
        const response = await this.getProductDetailV0ProductsProductIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Search for products.
     * Search
     */
    async searchV0SearchPostRaw(requestParameters: SearchV0SearchPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Product>>> {
        if (requestParameters['searchRequest'] == null) {
            throw new runtime.RequiredError(
                'searchRequest',
                'Required parameter "searchRequest" was null or undefined when calling searchV0SearchPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // APIKeyHeader authentication
        }


        let urlPath = `/v0/search`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SearchRequestToJSON(requestParameters['searchRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ProductFromJSON));
    }

    /**
     * Search for products.
     * Search
     */
    async searchV0SearchPost(requestParameters: SearchV0SearchPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Product>> {
        const response = await this.searchV0SearchPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
